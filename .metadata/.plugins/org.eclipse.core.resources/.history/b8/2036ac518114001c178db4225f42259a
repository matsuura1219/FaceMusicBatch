package com.matsuura.FaceMusicBatch.service;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;

import com.matsuura.FaceMusicBatch.model.CSVMember;

public class DownloadCSVClient {

	/** 変数 **/

	private static DownloadCSVClient client;

	/** シングルトン **/

	public static DownloadCSVClient getInstance() {

		if (client == null) {
			client = new DownloadCSVClient();
		}

		return client;
	}

	/** 外部URLからCSVファイルをダウンロードする関数です **/

	public void downloadCSVFile() {

		//ファイル読み込みで使用する３つのクラス
		FileInputStream fi = null;
		InputStreamReader is = null;
		BufferedReader br = null;

		try {

			// 読み込みファイルのインスタンス生成
			// ファイル名を指定する
			fi = new FileInputStream("resources/test.csv");
			is = new InputStreamReader(fi);
			br = new BufferedReader(is);

			//読み込み行
			String line;

			//読み込み行数の管理
			int i = 0;

			//1行ずつ読み込みを行う
			while ((line = br.readLine()) != null) {

				// データ内容をコンソールに表示する
				System.out.println("-------------------------------");

				// データ件数を表示
				System.out.println("データ" + i + "件目");

				if (i >= 1) {

					// カンマで分割した内容を配列に格納する
					String[] data = line.split(",");

					// ランキング
					String position = data[0];
					// トラック名
					String track = data[1];
					// 歌手名
					String artist = data[2];
					// 楽曲ID
					String id = "";

					if (data[3].substring(0, 5).equals("https")) {
						id = data[3];
					} else {
						id = data[4];
					}


					System.out.println("===================================================");
					System.out.println(i + "行目：");
					System.out.println("ランキング：" + position);
					System.out.println("トラック：" + track);
					System.out.println("歌手：" + artist);
					System.out.println("id：" + id);
					System.out.println("===================================================");


					// 配列の中身を順位表示する。列数(=列名を格納した配列の要素数)分繰り返す
					int count = 0;
					for (String column : data) {
						System.out.println(column + ":" + data[count]);


						CSVMember member = new CSVMember();
						// ランキング
						member.setPosition(position);
						// トラック名
						member.setTrack(track);
						count++;

					}


				}

				//行数のインクリメント
				i++;

			}

		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				br.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

	}

}

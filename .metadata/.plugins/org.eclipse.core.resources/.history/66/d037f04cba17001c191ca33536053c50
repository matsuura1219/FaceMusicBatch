package com.matsuura.FaceMusicBatch.controllers;

import java.util.ArrayList;

import com.matsuura.FaceMusicBatch.interfaces.GetAPIDataListener;
import com.matsuura.FaceMusicBatch.interfaces.GetAccessTokenListener;
import com.matsuura.FaceMusicBatch.model.APITypeEnum;
import com.matsuura.FaceMusicBatch.model.CSVData;
import com.matsuura.FaceMusicBatch.model.MusicData;
import com.matsuura.FaceMusicBatch.service.DownloadCSVClient;
import com.matsuura.FaceMusicBatch.service.SpotifyApiClient;

/** DBに格納されている楽曲データを更新するコントローラーです **/

public class UpdateDBController implements GetAccessTokenListener, GetAPIDataListener {

	/** 変数 **/

	// 楽曲データ
	private ArrayList<MusicData> musicDatas = null;

	/** 定数 **/

	private int MAX_API_CALL_COUNT = 100;

	/** コンストラクタ **/

	public UpdateDBController() {

	}

	/** コントローラーを起動する関数です **/

	public void excute() {

		// Spotofy アクセストークンを取得します
		SpotifyApiClient.getInstance().getAccessToken(this);

	}


	/** アクセストークン取得時に実行されるコールバック関数です
	 * @param accessToken String アクセストークン
	 */
	public void onSuccess(String accessToken) {

		//System.out.println(accessToken);

		ArrayList<CSVData> datas = DownloadCSVClient.getInstance().downloadCSVFile();

		for (int i=0; i<=MAX_API_CALL_COUNT; i++) {

			SpotifyApiClient.getInstance().getEmotionAndDurationData(datas.get(i).getId(), accessToken, this);

		}

	}

	/** アクセストークン取得失敗時に実行されるコールバック関数です
	 * @param errorCode String エラーコード
	 */
	public void onFailure(String errorCode) {


	}

	/** API呼び出し時に実行されるコールバック関数です
	 * @param accessToken String アクセストークン
	 */

	public void onSuccess(APITypeEnum type, MusicData data) {

		if (type == APITypeEnum.GET_EMOTION_AND_DURATION_DATA_API) {

			if (musicDatas == null) {
				musicDatas = new ArrayList<MusicData>();
			}

			musicDatas.add(data);

			if (musicDatas.size() == MAX_API_CALL_COUNT) {

				for (int i=0; i<=MAX_API_CALL_COUNT; i++) {

					SpotifyApiClient.getInstance().getOtherMusicData(musicDatas.get(i), accessToken);
				}


			}

		}


	}

	/** API呼び出し失敗時に実行されるコールバック関数です
	 * @param type APITypeEnum APIの種類
	 * @param errorCode String エラーコード
	 */

	public void onFailure(APITypeEnum type, String errorCode) {


	}


}
